;;; nyacc/lang/sx-util.test             -*- scheme -*-
;;; 
;;; Copyright (C) 2017-2018,2023 Matthew Wette
;;; 
;;; Copying and distribution of this file, with or without modification,
;;; are permitted in any medium without royalty provided the copyright
;;; notice and this notice are preserved.  This file is offered as-is,
;;; without any warranty.

(define-module (sx-util)
  #:use-module (nyacc lang sx-util)
  #:use-module (test-suite lib))

(use-modules (ice-9 pretty-print))
(define pp pretty-print)
(define (sf fmt . args) (apply simple-format #t fmt args))

(define (fold p s l)
  (let loop ((s s) (l l))
    (if (null? l) s (loop (p (car l) s) (cdr l)))))

(define ctr
  (let ((p (make-count-reporter))) (register-reporter (car p)) ((cadr p))))
(register-reporter full-reporter)

(with-test-prefix "nyacc/sx-util"

  (pass-if "sx-cons"
    (fold
     (lambda (pair status)
       ;;(sf "~S vs ~S\n" (apply sx-cons (car pair)) (cdr pair))
       (and status (equal? (apply sx-cons (car pair)) (cdr pair))))
     #t
     '(((a #f ((b "c") (d "e"))) . (a (b "c") (d "e")))
       ((a () ((b "c"))) . (a (b "c")))
       ((a (@) ((b "c"))) . (a (b "c")))
       ((a (@ (p "P") (q "Q")) ((b "c"))) . (a (@ (p "P") (q "Q")) (b "c")))
       ((a ((p "P") (q "Q")) ((b "c"))) . (a (@ (p "P") (q "Q")) (b "c"))))))

  (pass-if "sx-cons*"
    (fold
     (lambda (pair status)
       ;;(sf "~S vs ~S\n" (apply sx-cons* (car pair)) (cdr pair))
       (and status (equal? (apply sx-cons* (car pair)) (cdr pair))))
     #t
     '(((a #f ((b "c") (d "e"))) . (a (b "c") (d "e")))
       ((a #f (b "c") ((d "e"))) . (a (b "c") (d "e")))
       ((a #f #f ((d "e"))) . (a (d "e")))
       ((a #f () ((d "e"))) . (a (d "e")))
       ((a () ((b "c"))) . (a (b "c")))
       ((a (@) ((b "c"))) . (a (b "c")))
       ((a (@ (p "P") (q "Q")) ((b "c"))) . (a (@ (p "P") (q "Q")) (b "c")))
       ((a ((p "P") (q "Q")) ((b "c"))) . (a (@ (p "P") (q "Q")) (b "c"))))))

  (pass-if "sx-list"
    (fold
     (lambda (pair status)
       ;;(sf "~S vs ~S\n" (apply sx-list (car pair)) (cdr pair))
       (and status (equal? (apply sx-list (car pair)) (cdr pair))))
     #t
     '(((a #f (b "c") (d "e")) . (a (b "c") (d "e")))
       ((a #f (b "c") (d "e")) . (a (b "c") (d "e")))
       ((a #f #f (d "e")) . (a (d "e")))
       ((a #f () (d "e")) . (a (d "e")))
       ((a () (b "c")) . (a (b "c")))
       ((a (@) (b "c")) . (a (b "c")))
       ((a (@ (p "P") (q "Q")) (b "c")) . (a (@ (p "P") (q "Q")) (b "c")))
       ((a ((p "P") (q "Q")) (b "c")) . (a (@ (p "P") (q "Q")) (b "c"))))))

  )

(with-test-prefix "nyacc/sx-find"

  (pass-if "basics"
    (and
     (sx-find 'c '(a "b" (c "d" (e "f"))))
     (sx-find '(c e) '(a "b" (c "d" (e "f"))))
     #t))
  
  )
  
#;(with-test-prefix "nyacc/sx-match"

  (pass-if "basics"
    (and
     (sx-match '(foo (bar)) (,_ #t))
     (sx-match '(foo "hello") ((foo ,_) #t) (,_ #f))
     (sx-match '(foo "hello") ((foo ,_) #t) (,_ #f))
     (sx-match '(foo (bar (baz))) ((foo (bar (baz))) #t) (,_ #f))
     (sx-match '(foo (bar)) ((foo ,nd) (equal? '(bar) nd)) (,_ #f))
     (sx-match '(foo) ((foo . ,_) #t) (,_ #f))
     #t))

  (pass-if "w/ val attr, w/ pat attr"
    (and
     (sx-match '(foo (@ (a "1") (b "2")))
       ((foo (@ . ,al)) #t)
       (,_ #f))
     (sx-match '(foo (@ (a "1")) "hello")
       ((foo (@ . ,al) . ,rest) #t)
       (,_ #f))
     (sx-match '(foo (@) (bar "baz") "hello")
       ((foo (bar (@ . ,al) . ,text) . ,rest) #t)
       (,_ #f))
     (sx-match '(foo (bar (@ (a "1")) "baz") "hello")
       ((foo (@ . ,al) (bar . ,text) . ,rest) #t)
       (,_ #f))
     #t))

  (pass-if "no val attr, w/ pat attr"
    (and
     (sx-match '(foo) ((foo (@ . ,al)) #t) (,_ #f))
     (sx-match '(foo "hello") ((foo (@ . ,al) . ,rest) #t) (,_ #f))
     (sx-match '(foo (bar "baz") "hello")
       ((foo (bar (@ . ,al) . ,text) . ,rest) #t) (,_ #f))
     (sx-match '(foo (bar "baz") "hello")
       ((foo (@ . ,al) (bar . ,text) . ,rest) #t) (,_ #f))
     #t))

  (pass-if "w/ val attr, no pat attr"
    (and
     (sx-match '(foo (@ (a "1") (b "2"))) ((foo) #t) (,_ #f))
     (sx-match '(foo (@ (a "1")) "hello") ((foo . ,rest) #t) (,_ #f))
     (sx-match '(foo (@) (bar "baz") "hello")
       ((foo (bar . ,text) . ,rest) #t) (,_ #f))
     (sx-match '(foo (bar (@ (a "1")) "baz") "hello")
       ((foo (bar . ,text) . ,rest) #t) (,_ #f))
     #t))

  (pass-if "no val attr, no pat attr"
    (and
     (sx-match '(foo) ((foo) #t) (,_ #f))
     (sx-match '(foo "hello") ((foo . ,rest) #t) (,_ #f))
     (sx-match '(foo (bar "baz") "hello")
       ((foo (bar . ,text) . ,rest) #t) (,_ #f))
     #t))

  (pass-if "attr entries"
    (and
     (sx-match '(foo (@ (a "1") (b "2")))
       ((foo (@ (a ,a) (b ,b))) (and (equal? a "1") (equal? b "2")))
       (,_ #f))
     (sx-match '(foo (@ (a "1")) "hello")
       ((foo (@ (a ,a) (b ,b)) . ,rest) (and (equal? a "1") (eq? b #f)))
       (,_ #f))
     (sx-match '(foo (@) (bar "baz") "hello")
       ((foo (bar (@ (a ,a) (b ,b)) . ,t) . ,r) (and (eq? a #f) (eq? b #f)))
       (,_ #f))
     (sx-match '(foo (bar (@ (a "1")) "baz") "hello")
       ((foo (@ . ,al) (bar . ,text) . ,rest) #t)
       (,_ #f))
     #t))

  (pass-if "more random tests"
    (and
     ;;(sx-match '(foo "abc" "def") ((foo (bar . *)) #f) (,_ #t))
     (sx-match '(foo "hi") ((foo ,greet) (string=? greet "hi")) (,_ #f))
     (sx-match '(foo "hi") ((foo . ,rest) (string=? (car rest) "hi")) (,_ #f))
     (sx-match '(foo "hi") ((foo "bar") #f) ((foo "hi") #t) (,_ #f))
     #t))

  (pass-if "sx-match-tail"
    (and
     (sx-match-tail '((foo "hi") "there") (((foo "hi") . ,_) #t) (,_ #f))
     #t))
        
  )

(exit (if (positive? (assq-ref ctr 'fail)) 1 0))
;;; --- last line ---
