
Copyright (C) 2015-2019,2024 Matthew Wette

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

=== This package can be installed or executed in situ. 

To play with example code and try modifications without installing:

  $ cd examples
  $ source env.sh

=== Hacking on the C99 parser ====

To play with the C99 code, in place, I recommend the following:
After sourcing env.sh in the examples subdirectory, execute

  $ cd nyacc/lang/c99
  $ ./cxp hello.c

The Guile source program cxp will print out the parse tree for hello.c
This is based on a C99 parser written with the NYACC parser generator.
 
If you modify module/nyacc/lang/c99/mach.scm you will need to rebuild the
files in the subdirectory mach.d.  To do this execute the script 
@code{mach.gen} in @path{modules/lang/c99/}.

=== Nyacc eXtension languages (or not-exactly languages)

  $ guile
  ...
  scheme@(guile-user)> ,L nx-javascript
  Happy hacking with nx-javascript!  To switch back, type `,L scheme'.
  nx-javascript@(guile-user)> var a = 1;
  nx-javascript@(guile-user)> ,L nx-mlang
  Happy hacking with nx-mlang!  To switch back, type `,L nx-javascript'.
  nx-octave@(guile-user)> b = 2;
  nx-octave@(guile-user)> ,L nx-tsh
  Happy hacking with nx-tsh!  To switch back, type `,L nx-mlang'.
  nx-tsh@(guile-user)> set c ($a + $b)
  nx-tsh@(guile-user)> ,L scheme
  Happy hacking with Scheme!  To switch back, type `,L nx-tcl'.
  scheme@(guile-user)> a
  $1 = 1
  scheme@(guile-user)> b
  $2 = 2
  scheme@(guile-user)> c
  $2 = 3

=== Hacking on the FFI Helper ====
  $ cd examples
  $ source env.sh 			# if you haven't done so previously
  $ guild compile-ffi ffi/cairo.ffi
  $ cd nyacc/lang/c99/ffi-exam
  $ guile demo-cairo.scm		# should generate demo-cairo.png

